{
	// Place your leetcode workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Quick Start JS": {
		"scope": "javascript,typescript",
		"prefix": "start",
		"body": [
			"/**",
			"* $1",
			"*",
			"* Type: $2",
			"* Difficulty: $3",
			"* Time Complexity: O($4)",
			"* Space Complexity: O($5)",
			"*/",
			"",
			"import test from 'ava'",
			"",
			"",
			"function main () {",
			"  const testList = [",
			"    {",
			"      testData: 1,",
			"      result: 2",
			"    },",
			"  ]",
			"",
			"  for (const { testData, result } of testList) {",
			"    test(JSON.stringify(testData), t => {",
			"      t.is(answer(testData), result)",
			"    })",
			"  }",
			"}",
			"",
			"main()",
			"",
		]
	},
	"Quick Start": {
		"scope": "cpp",
		"prefix": "start",
		"body": [
			"/**",
			"* $1",
			"*",
			"* Type: $2",
			"* Difficulty: $3",
			"* Time Complexity: O($4)",
			"* Space Complexity: O($5)",
			"*/",
			"",
			"#include <cassert>",
			"using namespace std;",
			"",
			"",
			"int main() {",
			"  Solution mySolution;",
			"",
			"  return 0;",
			"}",
			"",
		]
	}
}